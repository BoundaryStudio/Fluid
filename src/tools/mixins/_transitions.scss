// stylelint-disable property-blacklist
//
// Transition Mixin
//

// Placeholder for prefers-reduced-motion query
%prefers-reduced-motion {
  @media (prefers-reduced-motion: reduce) {
    transition: none;
  }
}

//
// transition
// Mixin Used to control and generate transition
//
// Parameters:
// {String} $transitions - transitions strings
@mixin transition($transitions...) {
  $transition-combined: "";
  @if $enable-transitions {
    // if no input argument is give
    @if length($transitions) == 0 {
      $transition-combined: all .2s ease-in-out; // Default transition
    } @else {
      @each $transition in $transitions {
        @if type-of($transition) != string and type-of($transition) != list {
          @error "The argument transitions: `#{transitions}` is of incorrect type: `#{type-of(transitions)}`. Type of `string` or `list` is required!";
        }
        $transition-combined: suffix($transition-combined, ",") + $transition;
      }
    }
    transition: unquote($transition-combined);

    @if $enable-prefers-reduced-motion-media-query {
      @extend %prefers-reduced-motion;
    }
  }
}

//
// animation
// Mixin Used to generate animation
//
// Arguments:
// {String} $name - Name of the animation
// [optional] {Boolean} $infinite - used to set animation to infinite
// [optional] {Time} $duration - Duration of animation
// [optional] {Animation function} $function - Animation function
//
@mixin animation($name, $infinite: false, $duration: 1s, $function: ease-out) {
  @if $enable-transitions {
    @if ($name == none) {
      animation: none;
    } @else {
      @include include-keyframe($name);
      $infinite: if($infinite, infinite, null);
      animation: $name $duration $function both $infinite;
    }
  }
}

@mixin include-keyframe($name) {
  $imported-pulse: false !default;
  $imported-pulse-solid: false !default;
  $imported-flash: false !default;
  $imported-spin: false !default;

  @if $name == pulse and not $imported-pulse {
    $imported-pulse: true;
    @keyframes pulse {
      from {
        box-shadow: box-shadow(0 0 0 0 currentColor);
      }
      75% {
        box-shadow: box-shadow(0 0 0 ($input-focus-width * 1.5) transparent);
      }
      76% {
        box-shadow: box-shadow(none);
      }
    }
  } @else if $name == pulse-solid and not $imported-pulse-solid {
    $imported-pulse-solid: true;
    @keyframes pulse-solid {
      from {
        box-shadow: box-shadow(0 0 0 0 $gray-500);
      }
      75% {
        box-shadow: box-shadow(0 0 0 ($input-focus-width * 1.5) transparent);
      }
      76% {
        box-shadow: box-shadow(none);
      }
    }
  } @else if $name == flash and not $imported-flash {
    $imported-flash: true;
    @keyframes flash {
      from,
      50%,
      to {
        opacity: 1;
      }
      25%,
      75% {
        opacity: 0;
      }
    }
  } @else if $name == spin and not $imported-spin {
    $imported-spin: true;
    @keyframes spin {
      100% {
        transform: rotate(360deg);
      }
    }
  } @else {
    @error "animation keyframe for animation #{$name} not found.";
  }
}
