//
// Transition Mixin
//

//
// transition
// Mixin Used to control and generate transition
//
// Required arguments:
// {String} $transitions - transitions strings
@mixin transition($transitions...) {
  $transition-combined: "";
  @if $enable-transitions {
    // if no input argument is give
    @if length($transitions) != 0 {
      $transition-combined: all .2s ease-in-out; // Default transition
    } @else {
      @each $transition in $transitions {
        @if type-of($transition) != string {
          @error "The argument transitions: `#{transitions}` is of incorrect type: `#{type-of(transitions)}`. Type of `string` is required!";
        }
        $transition-combined: suffix($transition-combined, ",") + $transition;
      }
    }
    transition: $transition-combined;

    @if $enable-prefers-reduced-motion-media-query {
      @media (prefers-reduced-motion: reduce) {
        transition: none;
      }
    }
  }
}

//
// animation-pulse
// Mixin Used to control and generate pulse animation
//
// Arguments:
// [optional] {Boolean} $infinite - used to set animation to infinite
// [optional] {Color} $color - Color used to animate shadow
// [optional] {Time} $Duration - Duration of animation
// [optional] {Animation function} $function - Animation function
//
@mixin animation-pulse($infinite: false, $duration: 1s, $function: ease-out, $width: .3rem) {
  @if $enable-transitions {
    @keyframes pulse {
      0% {
        box-shadow: 0 0 0 0 rgba($dark, .4);
      }
      70% {
        box-shadow: 0 0 0 $width rgba($dark, 0);
      }
      100% {
        box-shadow: 0 0 0 0 rgba($dark, 0);
      }
    }

    $infinite: if($infinite, infinite, null);
    animation: pulse $duration $function both $infinite;
  }
}
