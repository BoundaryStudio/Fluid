//
// Breakpoints Functions
//

//
// breakpoint-next
// return the name of the breakpoint next of supplied breakpoint
//
// Required arguments:
// {String} $breakpoint - name of the breakpoint to find next of
// {Map} $breakpoints - breakpoints map to look into
//
// Example of use:
// $breakpoints: (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px);
// breakpoint-next(sm) => md
// breakpoint-next(sm, $breakpoints) => md
// breakpoint-next(sm, (xs sm md lg xl)) => md
//
// Return :
// {String|null} the name of the breakpoint next of supplied breakpoint or null for the last breakpoint.
//
@function breakpoint-next($name, $breakpoints: $breakpoints) {
  $breakpoints: to-list($breakpoints, "keys");
  @return list-next($breakpoints, $name);
}

//
// breakpoint-lower
// return the lower value of the breakpoint
//
// Required arguments:
// {String} $breakpoint - name of the breakpoint
// {Map} $breakpoints - breakpoints map to look into
//
// Example of use:
// $breakpoints: (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px);
// breakpoint-lower(xs) => 0
// breakpoint-lower(sm, $breakpoints) => 576px44
//
// Return :
// {Number} Starting point of the breakpoint. Null for the smallest (first) breakpoint.
//
@function breakpoint-lower($name, $breakpoint: $breakpoints) {
  $lower: map-get($breakpoint, $name);
  @return if($lower == 0, null, $lower);
}

//
// breakpoint-upper
// return the upper value of the breakpoint
//
// Required arguments:
// {String} $breakpoint - name of the breakpoint
// {Map} $breakpoints - breakpoints map to look into
//
// Example of use:
// $breakpoints: (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px);
// breakpoint-upper(xs) => 575.5px
// breakpoint-upper(sm, $breakpoints) => 767.5px
//
// Return :
// {Number} Ending point of the breakpoint. Null for the largest (last) breakpoint.
//
@function breakpoint-upper($name, $breakpoint: $breakpoints) {
  $next: breakpoint-next($name, $breakpoint);
  @if not $next {
    @return null;
  }
  $next-lower: breakpoint-lower($next, $breakpoint);
  @return $next-lower - .05;
}

//
// breakpoint-name
// return breakpoint name based on setting `breakpoints-short-else-readable`
//
// Required arguments:
// {String} $breakpoint - name of the breakpoint
// [optional] {Map} $breakpoints - breakpoints map
//
// Example of use:
// $breakpoints: (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px);
// $breakpoints-readable: null mobile tablet desktop large;
// $breakpoints-short-else-readable: true;
// breakpoint-only(md) => desktop
//
@function breakpoint-name($breakpoint, $breakpoints: $breakpoints) {
  $breakpoints-keys: map-has-key($breakpoints, $breakpoint);
  @if not $breakpoints-keys {
    @error "$breakpoint `#{$breakpoint}` not found inside $breakpoints `#{$breakpoints}`.";
  }

  @if $breakpoints-short-else-readable {
    // if short breakpoints are preferred
    @return $breakpoint;
  } @else {
    // if user friendly breakpoints are preferred
    $breakpoints-keys: map-keys($breakpoints);
    $breakpoints-index: index($breakpoints-keys, $breakpoint);
    @return nth($breakpoints-readable, $breakpoints-index);
  }
}
