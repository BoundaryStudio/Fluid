//
// str-replace
// Replace occurrence of a string
//
// Parameters:
// {String} $string : String containing the word to replace
// {String} $search : word to replace
// [optional] {String} $replace : String to replace with
//
// Example of use:
// $result: str-replace('This is just an example', 'just', 'not') => $result: This is not an example
//
// Return:
// {String} String with replaced words
//
@function str-replace($string, $search, $replace: " ") {
  @if type-of($string) != "string" {
    @error "The argument $string: `#{$string}` is of incorrect type: `#{type-of($string)}`. Type of `string` is required!";
  } @else if type-of($search) != "string" and type-of($search) != "list" {
    @error "The argument $search: `#{$search}` is of incorrect type: `#{type-of($search)}`. Type of `string` or `list` is required!";
  } @else if type-of($replace) != "string" and type-of($replace) != "list" {
    @error "The argument $search: `#{$search}` is of incorrect type: `#{type-of($search)}`. Type of `string` or `list` is required!";
  } @else if length($search) != length($replace) {
    $search-able: null;
    $replace-able: null;
    @for $index from 1 to min(length($search), length($replace)) + 1 {
      $search-able: suffix($search-able, ", ") + nth($search, $index);
      $replace-able: suffix($replace-able, ", ") + nth($replace, $index);
    }
    @warn "There are #{length($search)} `#{$search}` to search and replace by #{length($replace)} `#{$replace}` in string `#{$string}`. Resulting string will only replace #{$search-able} with #{$replace-able}.";
  }

  @if type-of($search) == "list" {
    $result: $string;
    @for $index from 1 to min(length($search), length($replace)) + 1 {
      $result: str-replace($result, nth($search, $index), nth($replace, $index));
    }
    @return $result;
  }

  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}
