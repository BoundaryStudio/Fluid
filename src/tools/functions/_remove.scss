//
// remove
// remove specified value from a list
//
// Required arguments:
// {List} $list - list to remove from
// {Number} $value - value to remove
// [optional] {boolean} $recursive - is the list recursive
//
// Example of use:
// $a: [foo bar baz qux];
// $result: nth-delete($a, "bar") =>  [foo baz qux]
//
// Return :
// {List} new list
//

@function remove($list, $value, $recursive: false) {
  $result: ();

  @if length($list) == 0 {
    @error "Can not remove `#{$value}` from `#{$list}`. $list is empty or null";
  }

  @for $i from 1 through length($list) {
    @if type-of(nth($list, $i)) == list and $recursive {
      $result: append($result, remove(nth($list, $i), $value, $recursive));
    } @else if nth($list, $i) != $value {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

//
// remove-at
// remove value from a list at a specified index
//
// Required arguments:
// {List} $list - list to remove from
// {Number} $n - index to remove at
//
// Example of use:
// $a: (foo bar baz qux);
// $b: [foo bar baz qux];
// $result: nth-delete($a, 2) =>  foo baz qux
// $result: nth-delete($b, 2) =>  [foo baz qux]
//
// Return :
// {List} new list
//
@function remove-nth($list, $index) {
  $result: null;
  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
  } @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `remove-nth`.";
  } @else if abs($index) > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
  } @else {
    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);

    @for $i from 1 through length($list) {
      @if $i != $index {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}
