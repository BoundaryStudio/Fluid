//
// Buttons
//

@if $generate-component-classes {
  //
  // Base styles
  //

  .btn {
    @extend %control;
    text-align: center;


    //
    // Theme Variants
    //

    // Solid Theme
    &.is-sld {
      //
      // Default Solid Styles
      //
      $focus-background: clr-step($button-theme, -2);
      $active-background: clr-step($button-theme, 4);

      color: clr-auto($button-theme);
      @include gradient-bg($button-theme, 180deg);

      @include hover {
        box-shadow: box-shadow($button-focus-box-shadow rgba($button-theme, .5));
      }

      @include focus {
        @include gradient-bg($focus-background, 180deg);
      }

      @include active {
        color: clr-auto($active-background);
        @if $design-solid-else-gradients {
          background-color: $active-background;
        }
      }

      &.is-loading {
        @include loading-spinner-color(clr-auto($button-theme));
      }

      //
      // Color variants
      //
      @each $color, $value in $theme-colors {
        &.is-#{$color} {
          @include button-design-solid-varient($value);
        }
      }

      //
      // States
      //
      @include focus {
        @include animation(pulse-solid); // pulse animation on click event
      }

      @include active {
        @if not $design-solid-else-gradients {
          background-image: none; // Remove the gradient for the pressed/active state
        }
      }

      @include disabled {
        color: $white;
        background: $button-disabled-background;
        @if not $design-solid-else-gradients {
          background-image: none; // Remove CSS gradients if they're enabled
        }
      }
    }

    // Outline theme
    &.is-out {
      //
      // Default Outline Styles
      //
      border-color: $button-theme-light;
      color: $button-theme;

      @include button-design-outline-varient($button-theme); // Default button theme

      // Color variants
      @each $color, $value in $theme-colors {
        &.is-#{$color} {
          @include button-design-outline-varient($value);
        }
      }

      @include disabled {
        border-color: $button-disabled-background;
        color: $button-theme;
      }
    }

    // Minimal theme
    &.is-min {
      //
      // Default Minimal Styles
      //
      border-right: 0; // remove border to remove border spacing between minimal button groups
      border-left: 0; // remove border to remove border spacing between minimal button groups
      box-shadow: box-shadow(none); // remove focus box shadow

      @include after {
        content: "";
        position: absolute;
        right: 0;
        bottom: 0;
        left: 0;
        border-bottom: $border-width-default solid;

        @include transition($button-transition-minimal);
      }

      @include button-design-minimal-varient($button-theme); // Default button theme

      // Color variants
      @each $color, $value in $theme-colors {
        &.is-#{$color} {
          @include button-design-minimal-varient($value);
        }
      }

      @include focus {
        @include animation(none); // disable animations and play again on click event
        @include after {
          @include animation(flash); // flash animation for underline
          bottom: 20%;
        }
      }

      @include active {
        @include after {
          @include animation(none); // disable animations and play again on click event
          box-shadow: box-shadow(none);
        }
      }

      @include disabled {
        color: $button-theme;
        @include after {
          border-bottom-color: $button-disabled-background;
        }
      }
    }
  }

  //
  // Loading Animation
  //

  .btn.is-loading {
    pointer-events: none;
    // stylelint-disable-next-line declaration-no-important
    color: transparent !important;
    @include loading-spinner($button-theme);
  }

  //
  // Block
  //

  .btn.is-block {
    width: 100%;
  }

  //
  // Round Circle
  //

  // useful for button with only icons
  .btn.is-circle {
    padding: $button-iscircle-padding;
  }
}
