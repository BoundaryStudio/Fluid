// stylelint-disable selector-no-qualifying-type

// Button sizes
@mixin button-size($padding-y, $padding-x, $font-size, $line-height, $border-radius) {
  padding: $padding-y $padding-x;
  @include font-size($font-size);
  line-height: $line-height;
  // Manually declare to provide an override to the browser default
  @include border-radius($border-radius);
}

///

@mixin button-variant($color) {
  $background: $color;
  $border: $background;
  $hover-background: darken($background, 7.5%);
  $hover-border: darken($border, 10%);
  $active-background: darken($background, 10%);
  $active-border: darken($border, 12.5%);
  color: clr-contrast($background);
  @include gradient-bg($background);
  border-color: $border;
  // @include box-shadow($button-box-shadow);

  @include hover() {
    color: clr-contrast($hover-background);
    @include gradient-bg($hover-background);
    border-color: $hover-border;
  }

  @include focus() {
    color: clr-contrast($hover-background);
    @include gradient-bg($hover-background);
    border-color: $hover-border;
    // Avoid using mixin so we can pass custom focus shadow properly
    @if $design-shadow-else-border {
      // box-shadow: $button-box-shadow, 0 0 0 $button-focus-width rgba(mix(clr-contrast($background), $border, 15%), 0.5);
    } @else {
      // box-shadow: 0 0 0 $button-focus-width rgba(mix(clr-contrast($background), $border, 15%), 0.5);
    }
  }

  // Disabled comes first so active can properly restyle
  @include disabled() {
    color: clr-contrast($background);
    background-color: $background;
    border-color: $border;
    // Remove CSS gradients if they're enabled
    @if not $design-solid-else-gradients {
      background-image: none;
    }
  }

  .show > &.dropdown-toggle,
  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active {
    color: clr-contrast($active-background);
    background-color: $active-background;
    @if not $design-solid-else-gradients {
      background-image: none; // Remove the gradient for the pressed/active state
    }
    border-color: $active-border;

    @include focus() {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $design-shadow-else-border and $button-active-box-shadow != none {
        // box-shadow: $button-active-box-shadow, 0 0 0 $button-focus-width rgba(mix(clr-contrast($background), $border, 15%), 0.5);
      } @else {
        // box-shadow: 0 0 0 $button-focus-width rgba(mix(clr-contrast($background), $border, 15%), 0.5);
      }
    }
  }
}

@mixin button-outline-variant($color, $color-hover: clr-contrast($color), $active-background: $color, $active-border: $color) {
  color: $color;
  border-color: $color;

  @include hover() {
    color: $color-hover;
    background-color: $active-background;
    border-color: $active-border;
  }

  @include focus() {
    box-shadow: 0 0 0 $button-focus-width rgba($color, 0.5);
  }

  @include disabled() {
    color: $color;
    background-color: transparent;
  }

  .show > &.dropdown-toggle,
  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active {
    color: clr-contrast($active-background);
    background-color: $active-background;
    border-color: $active-border;

    @include focus() {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $design-shadow-else-border and $button-active-box-shadow != none {
        // box-shadow: $button-active-box-shadow, 0 0 0 $button-focus-width rgba($color, 0.5);
      } @else {
        // box-shadow: 0 0 0 $button-focus-width rgba($color, 0.5);
      }
    }
  }
}

///

@if $generate-component-classes {
  //
  // Base styles
  //

  .button {
    display: inline-block;
    font-family: $button-font-family;
    font-weight: $button-font-weight;
    color: $body-color;
    text-align: center;
    vertical-align: middle;
    user-select: none;
    background-color: transparent;
    border: $button-border-width solid transparent;
    @include button-size($button-padding-y, $button-padding-x, $font-size-default, $button-line-height, $button-border-radius);
    @include transition($button-transition);

    @include hover() {
      color: $body-color;
      text-decoration: none;
    }

    @include focus() {
      outline: 0;
      box-shadow: $button-focus-box-shadow;
    }

    @include disabled() {
      opacity: $button-disabled-opacity;
      @include box-shadow(none);
    }

    @include active() {
      // @include box-shadow($button-active-box-shadow);

      @include focus() {
        // @include box-shadow($button-focus-box-shadow, $button-active-box-shadow);
      }
    }

    //
    // Variants
    //

    // Button variants
    //
    // Easily pump out default styles, as well as :hover, :focus, :active,
    // and disabled options for all buttons

    @each $color, $value in $theme-colors {
      &.is-#{$color} {
        @include button-variant($value);
      }
    }

    // @each $color, $value in $theme-colors {
    //   .is-outline-#{$color} {
    //     @include button-outline-variant($value);
    //   }
    // }
  }

  // //
  // // Link buttons
  // //

  // // Make a button look and behave like a link
  // .button-link {
  //   font-weight: $font-weight-normal;
  //   color: $button-link-color;
  //   text-decoration: $link-decoration;

  //   @include hover() {
  //     color: $button-link-hover-color;
  //     text-decoration: $link-hover-decoration;
  //   }

  //   @include focus() {
  //     text-decoration: $link-hover-decoration;
  //     box-shadow: none;
  //   }

  //   &:disabled,
  //   &.disabled {
  //     color: $button-link-disabled-color;
  //     pointer-events: none;
  //   }

  //   // No need for an active state here
  // }

  //
  // Sizes
  //

  // .is-large {
  //   @include button-size($button-padding-y-large, $button-padding-x-large, $font-size-large, $button-line-height-large, $button-border-radius-large);
  // }

  // .is-small {
  //   @include button-size($button-padding-y-small, $button-padding-x-small, $font-size-small, $button-line-height-small, $button-border-radius-small);
  // }

  // //
  // // Block button
  // //

  // .is-block {
  //   display: block;
  //   width: 100%;

  //   // Vertically space out multiple block buttons
  //   + .is-block {
  //     margin-top: $button-block-spacing-y;
  //   }
  // }

  // // Specificity overrides
  // input[type="submit"],
  // input[type="reset"],
  // input[type="button"] {
  //   &.is-block {
  //     width: 100%;
  //   }
  // }

  // Future-proof disabling of clicks on `<a>` elements
  a.button.disabled,
  fieldset:disabled a.button {
    pointer-events: none;
  }
}
