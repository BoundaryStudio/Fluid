//
// Set
//
// Used to combine different components and objects into one set
// The main control needs to be the first child of set

.control {
  position: relative;
  margin-top: 2.25px;
  margin-bottom: 2.25px;
  @include fontsize(1rem);

  //
  // Input Control
  //
  > .input {
    @include fontsize(inherit);
    height: 100%;
    margin: 0; // remove margin from input and apply it to the set
  }

  &.has-icon-left {
    > .input {
      ~ .icon {
        z-index: $group-items-hover-focus-zindex + 1;
        pointer-events: none;
        opacity: $control-input-icon-opacity;
      }

      @include focus {
        ~ .icon {
          opacity: 1;
        }
      }
    }
  }

  &.has-floating-label > .input[placeholder=" "] {
    background-color: transparent;
    box-shadow: none;

    ~ label {
      position: absolute;
      top: 50%;
      left: strip-unit($controls-padding-x) * 1rem;
      transform: translateY(-50%);
      pointer-events: none;
      padding: 2px;
      background: $body-background;
      line-height: 1;
      @include transition(top, font-size);
    }

    @include focus(":not(:placeholder-shown)") {
      ~ label {
        top: 0%;
        @include font-size($default-small-quantity * 1em);
      }
    }
  }

  //
  // feedback inside control
  //
  > .feedback {
    position: absolute;
    right: 0;
    bottom: 100%;
    display: none;
    padding: $control-input-feedback-padding;
    margin-bottom: $control-input-feedback-arrow-size + $control-input-feedback-offset-bottom;
    border-radius: border-radius();
    color: $control-input-feedback-color;
    @include gradient-bg($control-input-feedback-background, 180deg);
    box-shadow: box-shadow($control-input-feedback-shadow);

    @include before {
      content: "";
      position: absolute;
      right: $control-input-feedback-arrow-offset-right;
      bottom: -($control-input-feedback-arrow-size * 2);
      @include triangle(bottom, $control-input-feedback-arrow-size, $control-input-feedback-background);
    }
  }

  &.is-valid > .feedback.is-valid {
    @extend %display-block;
  }

  &.is-invalid > .feedback.is-invalid {
    @extend %display-block;
  }
}

.is-validated .control {
  > .input:required {
    &:valid ~ .feedback.is-valid {
      @extend %display-block;
    }
    &:invalid ~ .feedback.is-invalid {
      @extend %display-block;
    }
  }
}
