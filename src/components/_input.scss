//
// input controls
//

//
// Base Style
//
.input {
  @extend %controls;
  @extend %controls-active;
  @extend %controls-hover;
  @extend %controls-focus;

  width: 100%;
  border-color: $input-border-color;
  background-color: $input-background;
  box-shadow: box-shadow($input-boxshadow-inner);

  @include hover {
    box-shadow: box-shadow($input-boxshadow-inner, $controls-focus-box-shadow rgba($controls-theme, .5)); // Fix: hover state box-shadow transition
  }

  @include focus {
    border-color: currentColor;
    box-shadow: box-shadow(none);
  }

  // minimal design variant
  &.is-min {
    // decrease padding bottom by the same width we are increasing border-bottom to make layout unaffected by design change
    padding-bottom: $controls-padding-y - convert-unit(($border-width-wide - 1), em);
    border-width: 0;
    border-bottom-width: $border-width-wide;
    border-radius: border-radius(0);

    @include not-hover {
      box-shadow: box-shadow(none); // remove inner shadow without overriding hover shadow
    }
  }

  @include disabled {
    @extend %controls-disabled;
  }
}

textarea.input:read-only,
input.input:read-only {
  @extend %controls-disabled;
}

//
// Color variants
//
@each $color, $value in $theme-colors {
  .input.is-#{$color} {
    @include input-varient($color, $value);
  }
}

// form validation style
.is-validated .input:required {
  &:valid {
    @extend .input.is-valid;
    @extend .input.is-valid.has-icon;
  }

  &:invalid {
    @extend .input.is-error;
    @extend .input.is-error.has-icon;
  }
}

select.input {
  // stylelint-disable-next-line property-no-vendor-prefix
  -moz-appearance: none;
  // stylelint-disable-next-line property-no-vendor-prefix
  -webkit-appearance: none;
  appearance: none;
  background-image: $icon-caret-down;
  @extend %controls-validation-icon;

  &::-ms-expand {
    display: none; // Hide caret on `<select>`s in IE
  }
}

.input::-ms-clear {
  color: $controls-theme; // Set IE clear field button color so that it is not affected by .input color
}

.input::placeholder {
  opacity: 1; // override Firefox's opacity
  color: $input-placeholder-color;
}

textarea.input {
  height: auto; // revert textarea height
  min-height: $input-minHeight; // prevent user from decreasing size lower than one row
}

//
// Input Control
//
.control {
  > .input {
    @include fontsize(inherit);
    display: flex; // align content in center based on height
    align-items: center; // align content in center based on height
    height: 100%;
    margin: 0; // remove margin from input and apply it to the control class
  }

  &.has-icon-left {
    > .input {
      ~ .icon {
        z-index: $group-items-hover-focus-zindex + 1;
        pointer-events: none;
        opacity: $control-input-icon-opacity;
      }

      @include focus {
        ~ .icon {
          opacity: 1;
        }
      }
    }
  }

  &.has-floating-label > .input[placeholder=" "] {
    background-color: transparent;

    ~ label {
      position: absolute;
      top: 50%;
      left: convert-unit($controls-padding-x, rem);
      transform: translateY(-50%);
      pointer-events: none;
      padding: 2px;
      background: $body-background;
      line-height: 1;
      @include transition(top, font-size);
    }

    @include focus(":not(:placeholder-shown)") {
      ~ label {
        top: 0%;
        @include fontsize($default-small-quantity * 1em);
      }
    }
    // stylelint-disable-next-line selector-no-vendor-prefix
    &:not(:-ms-input-placeholder) {
      ~ label {
        top: 0%;
        @include fontsize($default-small-quantity * 1em);
      }
    }
  }
}
