//
// Group
//
// Used to combine various controls together

@if $generate-component-classes {
  // Group addons
  .group > .addon {
    @extend %control;

    // separate from control placeholder to keep placeholder Priority/Precedence low
    &:not(.btn):not(.input) {
      user-select: auto; // allow user to select text inside addon
      border-color: $group-addon-border-color;
      background-color: $group-addon-background;

      &:not(a) {
        pointer-events: none;
      }
    }
  }

  //
  // Base styles
  //
  .group {
    display: flex;
    flex-wrap: wrap;

    &.is-lg {
      > .input,
      > .addon,
      > .btn {
        padding: $group-padding-y-lg $group-padding-x-lg;
      }
    }

    > .input,
    > .addon,
    > .btn {
      @include hover-focus {
        z-index: $group-items-hover-focus-zindex;
      }
    }

    > .input {
      flex: 1 1 0; // expand to max width available without overflow from group
    }

    &:not(.is-y) {
      > .input,
      > .addon,
      > .btn {
        margin-right: -$border-width-default / 2;
        margin-left: -$border-width-default / 2;
        border-radius: border-radius(0);
        &:first-child {
          @include border-radius-left($control-border-radius);
        }
        &:last-child {
          @include border-radius-right($control-border-radius);
        }
      }
    }

    &.is-y {
      > .input,
      > .addon,
      > .btn {
        margin-top: -$border-width-default / 2;
        margin-bottom: -$border-width-default / 2;
        border-radius: border-radius(0);
        &:first-child {
          @include border-radius-top($control-border-radius);
        }
        &:last-child {
          @include border-radius-bottom($control-border-radius);
        }
      }
    }

    &.is-borderless {
      &:not(.is-y) {
        > .input,
        > .addon,
        > .btn {
          border-top: 0; // avoid using @mixin border to remove borders independent of `$design-shadow-else-border` option
          border-bottom: 0; // avoid using @mixin border to remove borders independent of `$design-shadow-else-border` option
          border-radius: border-radius(0);

          &:first-child {
            border-left: 0; // avoid using @mixin border to remove borders independent of `$design-shadow-else-border` option
          }
          &:last-child {
            border-right: 0; // avoid using @mixin border to remove borders independent of `$design-shadow-else-border` option
          }
        }
      }
      &.is-y {
        > .input,
        > .addon,
        > .btn {
          border-right: 0; // avoid using @mixin border to remove borders independent of `$design-shadow-else-border` option
          border-left: 0; // avoid using @mixin border to remove borders independent of `$design-shadow-else-border` option
          border-radius: border-radius(0);

          &:first-child {
            border-top: 0; // avoid using @mixin border to remove borders independent of `$design-shadow-else-border` option
          }
          &:last-child {
            border-bottom: 0; // avoid using @mixin border to remove borders independent of `$design-shadow-else-border` option
          }
        }
      }
    }
  }

  .group.buttons {
    display: inline-flex; // override display property for buttons group
  }
}
