//
// Group
//
// Used to combine various controls together

@if $generate-component-classes {
  // Group addons
  .group {
    > .addon {
      @extend %controls;
      display: flex; // Center align content in addon
      align-items: center; // Center align content in addon

      // separate from control placeholder to keep placeholder Priority/Precedence low
      &:not(.btn):not(.input) {
        user-select: auto; // allow user to select text inside addon
        border-color: $group-addon-bordercolor;
        background-color: $group-addon-background;
      }
    }

    > a.addon {
      @extend %controls-active;
      @extend %controls-hover;
      @extend %controls-focus;
    }
  }

  //
  // Base styles
  //
  // stylelint-disable-next-line no-duplicate-selectors
  .group {
    display: flex;
    flex-wrap: wrap;

    &.is-lg {
      > .input,
      > .addon,
      > .btn {
        padding: $group-lg-padding-y $group-lg-padding-x;
      }
    }

    > .input,
    > .control,
    > .addon,
    > .btn {
      @include hover-focus {
        z-index: $group-items-hover-focus-zindex;
      }
    }

    > .input,
    > .control {
      flex: 1 1 0%; // expand to max width available without overflow from group
    }

    &:not(.is-y) {
      > .control {
        margin-right: -$controls-borderwidth / 2;
        margin-left: -$controls-borderwidth / 2;
        > .input {
          border-radius: border-radius(0);
        }
        &:first-child > .input:not(.is-min) {
          @include border-radius-left($controls-borderradius);
        }
        &:last-child > .input:not(.is-min) {
          @include border-radius-right($controls-borderradius);
        }
      }

      > .input,
      > .addon,
      > .btn {
        margin-right: -$controls-borderwidth / 2;
        margin-left: -$controls-borderwidth / 2;
        border-radius: border-radius(0);
        &:first-child:not(.is-min) {
          @include border-radius-left($controls-borderradius);
        }
        &:last-child:not(.is-min) {
          @include border-radius-right($controls-borderradius);
        }
      }
    }

    &.is-y {
      > .control {
        margin-top: -$controls-borderwidth / 2;
        margin-bottom: -$controls-borderwidth / 2;
        > .input {
          border-radius: border-radius(0);
        }
        &:first-child > .input:not(.is-min) {
          @include border-radius-top($controls-borderradius);
        }
        &:last-child > .input:not(.is-min) {
          @include border-radius-bottom($controls-borderradius);
        }
      }

      > .input,
      > .addon,
      > .btn {
        margin-top: -$controls-borderwidth / 2;
        margin-bottom: -$controls-borderwidth / 2;
        border-radius: border-radius(0);
        &:first-child:not(.is-min) {
          @include border-radius-top($controls-borderradius);
        }
        &:last-child:not(.is-min) {
          @include border-radius-bottom($controls-borderradius);
        }
      }
    }

    &.is-borderless {
      &:not(.is-y) {
        > .control {
          > .input {
            border-top: 0; // avoid using @mixin to remove borders independent of `$design-shadow-else-border` option
            border-bottom: 0; // avoid using @mixin to remove borders independent of `$design-shadow-else-border` option
            border-radius: border-radius(0);
          }

          &:first-child > .input {
            border-left: 0; // avoid using @mixin to remove borders independent of `$design-shadow-else-border` option
          }
          &:last-child > .input {
            border-right: 0; // avoid using @mixin to remove borders independent of `$design-shadow-else-border` option
          }
        }

        > .input,
        > .addon,
        > .btn {
          border-top: 0; // avoid using @mixin border to remove borders independent of `$design-shadow-else-border` option
          border-bottom: 0; // avoid using @mixin border to remove borders independent of `$design-shadow-else-border` option
          border-radius: border-radius(0);

          &:first-child {
            border-left: 0; // avoid using @mixin border to remove borders independent of `$design-shadow-else-border` option
          }
          &:last-child {
            border-right: 0; // avoid using @mixin border to remove borders independent of `$design-shadow-else-border` option
          }
        }
      }
      &.is-y {
        > .control {
          > .input {
            border-right: 0; // avoid using @mixin to remove borders independent of `$design-shadow-else-border` option
            border-left: 0; // avoid using @mixin to remove borders independent of `$design-shadow-else-border` option
            border-radius: border-radius(0);
          }

          &:first-child > .input {
            border-top: 0; // avoid using @mixin to remove borders independent of `$design-shadow-else-border` option
          }
          &:last-child > .input {
            border-bottom: 0; // avoid using @mixin to remove borders independent of `$design-shadow-else-border` option
          }
        }

        > .input,
        > .addon,
        > .btn {
          border-right: 0; // avoid using @mixin border to remove borders independent of `$design-shadow-else-border` option
          border-left: 0; // avoid using @mixin border to remove borders independent of `$design-shadow-else-border` option
          border-radius: border-radius(0);

          &:first-child {
            border-top: 0; // avoid using @mixin border to remove borders independent of `$design-shadow-else-border` option
          }
          &:last-child {
            border-bottom: 0; // avoid using @mixin border to remove borders independent of `$design-shadow-else-border` option
          }
        }
      }
    }
  }

  .group.buttons {
    display: inline-flex; // override display property for buttons group
  }
}
