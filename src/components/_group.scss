//
// Group
//

// Used to combine various inputs together
@if $generate-component-classes {
  // Group addons
  .group > .addon:not(.btn):not(.input) {
    @extend %control;
    user-select: auto; // allow user to select text inside addon
    border-color: $group-addon-border-color;
    background-color: $group-addon-background;
    @include hover {
      box-shadow: none; // remove shadows from control when hover
    }
  }

  //
  // Base styles
  //
  .group {
    display: flex;
    flex-wrap: wrap;

    > .input,
    > .addon,
    > .btn,
    > .list-item {
      @include fontsize(inherit);
      @include hover-focus {
        z-index: $group-items-hover-focus-zindex;
      }
    }

    &:not(.is-y) {
      > .input,
      > .addon,
      > .btn,
      > .list-item {
        margin-right: -$border-width-default / 2;
        margin-left: -$border-width-default / 2;
        &:not(:first-child):not(:last-child) {
          border-radius: border-radius(0);
        }
        &:first-child {
          @include border-radius-right(0);
        }
        &:last-child {
          @include border-radius-left(0);
        }
      }
    }
    &.is-y {
      > .input,
      > .addon,
      > .btn,
      > .list-item {
        margin-top: -$border-width-default / 2;
        margin-bottom: -$border-width-default / 2;
        &:not(:first-child):not(:last-child) {
          border-radius: border-radius(0);
        }
        &:first-child {
          @include border-radius-bottom(0);
        }
        &:last-child {
          @include border-radius-top(0);
        }
      }
    }

    &.is-purge {
      &:not(.is-y) {
        > .input,
        > .addon,
        > .btn,
        > .list-item {
          // avoid using @mixin to remove borders independent of `$design-shadow-else-border` option
          border-top: 0;
          border-bottom: 0;
          border-radius: border-radius(0);

          &:first-child {
            // avoid using @mixin to remove borders independent of `$design-shadow-else-border` option
            border-left: 0;
          }
          &:last-child {
            // avoid using @mixin to remove borders independent of `$design-shadow-else-border` option
            border-right: 0;
          }
        }
      }
      &.is-y {
        > .input,
        > .addon,
        > .btn,
        > .list-item {
          // avoid using @mixin to remove borders independent of `$design-shadow-else-border` option
          border-right: 0;
          border-left: 0;
          border-radius: border-radius(0);

          &:first-child {
            // avoid using @mixin to remove borders independent of `$design-shadow-else-border` option
            border-top: 0;
          }
          &:last-child {
            // avoid using @mixin to remove borders independent of `$design-shadow-else-border` option
            border-bottom: 0;
          }
        }
      }
    }
  }

    &.list {
      display: flex; // override group inline-flex
      > .list-item {
        padding: $group-list-item-padding-y $group-list-item-padding-x;
        // avoid using @mixin to generate borders independent of `$design-shadow-else-border` option
        border: $border-width-default solid $gray-200;
        border-radius: border-radius();
        outline: 0;
        color: $group-list-color;
        background-color: $group-list-background;
        text-decoration: none;
        @include transition($group-list-transition);

        @include disabled {
          pointer-events: none;
          opacity: $group-disabled-opacity;
          color: $group-list-disabled-color;
        }
      }

      > a.list-item,
      > button.list-item {
        @include active {
          border-color: $group-list-active-border-color;
          color: clr-auto($group-list-active-background);
          background-color: $group-list-active-background;
        }
      }
    }
  .group.buttons {
    display: inline-flex; // override display property for buttons group
  }
}
