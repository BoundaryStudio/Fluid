//
// Dropdown
//

.dropdown {
  @extend %position-relative;
  @extend %display-inlineblock;

  &.active > .menu {
    @extend %display-block; // Show menu when active
  }

  .menu,
  .menu-item,
  .dropdown {
    margin-left: 0; // override style from nested menu
    white-space: nowrap; // prevent wrapping of text
  }

  .dropdown:hover > .dropdown-trigger::before {
    border-width: 3px !important;
  }


  > .menu {
    position: absolute;
    top: 100%;
    z-index: $dropdown-menu-zindex;
    display: none; // hide menu to display over interaction
    overflow: visible; // override style from .menu to display Nested menu outside its context
    min-width: $dropdown-menu-minwidth;
    padding: $menu-padding-y 0; // override style from nested .menu to make menu inside dropdown look consistent
    margin-top: $dropdown-menu-spacer;
    border-radius: border-radius();
    background-color: $dropdown-menu-background;
    box-shadow: box-shadow($dropdown-menu-boxshadow);
    @include animation(fadein, $nestedMenu-animationduration);
  }

  .dropdown {
    display: flex;
    padding-right: 0; // restore padding to default;
  }
}

.dropdown-trigger {
  display: flex;

  @include after {
    content: "";
    transform: translateX(
      $dropdown-trigger-caret-size / 2
    ); // using transform in combination with margin-right to offset because we cannot change margin-left value
    align-self: center; // align at middle when used in display flex parent e.g .menu-item
    margin-right: $dropdown-trigger-caret-size / 2; // using transform in combination with margin-right to offset because we cannot change margin-left value
    margin-left: auto; // align at end when used in display flex parent e.g .menu-item
    @include triangle(bottom, $dropdown-trigger-caret-size, currentColor);
  }
}

//
// Dropdown-items Direction
//
.dropdown.is-right {
  > .menu {
    top: 0;
    left: 100%;
    margin: 0 0 0 $dropdown-menu-spacer;
  }

  > .dropdown-trigger::after {
    transform: rotate(270deg) translateY($dropdown-trigger-caret-size / 2);
  }
}

.dropdown.is-left {
  > .menu {
    top: 0;
    right: 100%;
    margin: 0 $dropdown-menu-spacer 0 0;
  }
  > .dropdown-trigger::after {
    transform: rotate(90deg) translateY(-$dropdown-trigger-caret-size / 2);
  }
}

.dropdown.is-top {
  > .menu {
    top: auto;
    bottom: 100%;
    margin: 0 0 $dropdown-menu-spacer 0;
  }
  > .dropdown-trigger::after {
    transform: rotate(180deg) translateX(-$dropdown-trigger-caret-size / 2);
  }
}

//
// Pure CSS approach to interact dropdown
//
.dropdown.is-hover {
  .dropdown {
    @include hover {
      > .menu {
        @extend %display-block;
      }

    }
  }
  @include hover {
    > .menu {
      @extend %display-block;
    }
  }
}

// Prevent dropdown from closing between gaps by creating additional area around dropdown
.dropdown.is-hover:hover,
.dropdown.is-hover.hover {
  .menu::before,
  .dropdown-items::before {
    content: "";
    position: absolute;
    top: -$dropdown-menu-spacer;
    right: -$dropdown-menu-spacer;
    bottom: -$dropdown-menu-spacer;
    left: -$dropdown-menu-spacer;
  }
}

.dropdown > .divider:not(:empty) {
  padding: $controls-padding-y;
}

.dropdown.is-mega {
  position: static;

  @include hover {
    .menu::before {
      content: none;
    }
  }
}
